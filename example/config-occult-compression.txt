# network size
SIZE 4

# parameters of periodic execution
CYCLES 100000
CYCLE 1

# random.seed 1234567890
network.size SIZE
simulation.endtime CYCLES
simulation.logtime CYCLE


groups {[0],[0,1],[0,1,2,3]}{[1],[0,1],[0,1,2,3]}{[2],[2,3],[0,1,2,3]}{[3],[2,3],[0,1,2,3]}

partitions_datacenters example/partitions/four_nodes_all_connected_partition.top
partitions_clients example/client-partitions/four_nodes_all_connected_partition.top


########### OCCULT CONFIGS #############
occult_type temporal_compression
client_ts_size 10
objects_per_shard 2

client_read_retries 2
client_read_retry_interval 1000
########################################








tree tree
##########################################

################### protocols ===========================

protocol.link peersim.core.IdleProtocol

protocol.tree example.occult.temporal_compression.OccultIdenticalTreeProtocol
protocol.tree.step CYCLE
protocol.tree.transport tr
protocol.tree.tree_protocol tree
protocol.tree.linkable link


protocol.urt example.common.PointToPointTransport

protocol.tr UnreliableTransport
protocol.tr.transport urt
protocol.tr.drop 0

################### initialization ======================

### Creates graph and sets latencies
init.1 example.common.WireTopology
init.1.topology_path example/topologies
init.1.topology_file four_nodes_all_connected.top
init.1.protocol link

### Inits queues based on graph
init.2 example.occult.InitTreeProtocol
init.2.tree_protocol tree
init.2.clients_cycle 1

init.sch CDScheduler
init.sch.protocol tree
init.sch.randstart

################ control ==============================

control.0 example.occult.Controller
control.0.protocol tree
control.0.step CYCLE
control.0.output_file output/